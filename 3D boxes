-- Services
local RunService = game:GetService("RunService")
local PlayersService = game:GetService("Players")

-- Variables
local Camera = workspace.CurrentCamera
local Lines = {}
local Quads = {}

-- Functions
local function HasCharacter(Player)
    return Player.Character and Player.Character:FindFirstChild("HumanoidRootPart")
end

local function GetCorners(Part)
    local CF, Size = Part.CFrame, Part.Size / 2
    return {
        (CF * CFrame.new(Size.X, Size.Y, Size.Z)).Position,
        (CF * CFrame.new(-Size.X, Size.Y, Size.Z)).Position,
        (CF * CFrame.new(Size.X, -Size.Y, Size.Z)).Position,
        (CF * CFrame.new(-Size.X, -Size.Y, Size.Z)).Position,
        (CF * CFrame.new(Size.X, Size.Y, -Size.Z)).Position,
        (CF * CFrame.new(-Size.X, Size.Y, -Size.Z)).Position,
        (CF * CFrame.new(Size.X, -Size.Y, -Size.Z)).Position,
        (CF * CFrame.new(-Size.X, -Size.Y, -Size.Z)).Position
    }
end

local function CreateOrUpdateDrawing(DrawingTable, Index, Type)
    if not DrawingTable[Index] then
        local NewDrawing = Drawing.new(Type)
        NewDrawing.Thickness = Type == "Line" and 1 or 0.5
        NewDrawing.Color = Color3.fromRGB(255, 255, 255)
        NewDrawing.Transparency = Type == "Line" and 1 or 0.25
        NewDrawing.ZIndex = 1
        NewDrawing.Visible = false
        if Type == "Quad" then NewDrawing.Filled = true end
        DrawingTable[Index] = NewDrawing
    end
    return DrawingTable[Index]
end

local function DrawEsp(Player, LineIndex, QuadIndex)
    local HRP = Player.Character:FindFirstChild("HumanoidRootPart")
    if not HRP then return LineIndex, QuadIndex end

    local Corners = GetCorners({ CFrame = HRP.CFrame * CFrame.new(0, -0.5, 0), Size = Vector3.new(3, 5, 3) })
    local ScreenCorners, Visible = {}, false

    for i = 1, 8 do
        local ScreenPos, IsVisible = Camera:WorldToViewportPoint(Corners[i])
        ScreenCorners[i] = Vector2.new(ScreenPos.X, ScreenPos.Y)
        Visible = Visible or IsVisible
    end

    if not Visible then return LineIndex, QuadIndex end

    -- Define edges of the box
    local Edges = {
        {1, 2}, {2, 4}, {4, 3}, {3, 1}, -- Bottom
        {5, 6}, {6, 8}, {8, 7}, {7, 5}, -- Top
        {1, 5}, {2, 6}, {3, 7}, {4, 8}  -- Vertical
    }

    -- Draw edges
    for _, Edge in ipairs(Edges) do
        local Line = CreateOrUpdateDrawing(Lines, LineIndex, "Line")
        Line.From, Line.To, Line.Visible = ScreenCorners[Edge[1]], ScreenCorners[Edge[2]], true
        LineIndex = LineIndex + 1
    end

    -- Draw faces
    local Faces = {
        {1, 2, 6, 5}, {2, 4, 8, 6}, {4, 3, 7, 8}, {3, 1, 5, 7}, {1, 2, 4, 3}, {5, 6, 8, 7}
    }

    for _, Face in ipairs(Faces) do
        local Quad = CreateOrUpdateDrawing(Quads, QuadIndex, "Quad")
        Quad.PointA, Quad.PointB, Quad.PointC, Quad.PointD, Quad.Visible =
            ScreenCorners[Face[1]], ScreenCorners[Face[2]], ScreenCorners[Face[3]], ScreenCorners[Face[4]], true
        QuadIndex = QuadIndex + 1
    end

    return LineIndex, QuadIndex
end

local function BoxEsp()
    local Players = PlayersService:GetPlayers()
    local LineIndex, QuadIndex = 1, 1

    for _, Player in ipairs(Players) do
        if HasCharacter(Player) then
            LineIndex, QuadIndex = DrawEsp(Player, LineIndex, QuadIndex)
        end
    end

    -- Hide unused drawings
    for i = LineIndex, #Lines do Lines[i].Visible = false end
    for i = QuadIndex, #Quads do Quads[i].Visible = false end
end

RunService.RenderStepped:Connect(BoxEsp)
